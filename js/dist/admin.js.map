{"version":3,"sources":["webpack://@clarkwinkelmann/godot-embed/webpack/bootstrap","webpack://@clarkwinkelmann/godot-embed/external \"flarum.core.compat['admin/app']\"","webpack://@clarkwinkelmann/godot-embed/external \"flarum.core.compat['common/components/Tooltip']\"","webpack://@clarkwinkelmann/godot-embed/external \"flarum.core.compat['common/helpers/icon']\"","webpack://@clarkwinkelmann/godot-embed/external \"flarum.core.compat['common/components/Button']\"","webpack://@clarkwinkelmann/godot-embed/external \"flarum.core.compat['common/components/Switch']\"","webpack://@clarkwinkelmann/godot-embed/./src/admin/index.ts"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","flarum","core","compat","settingName","translationPrefix","app","initializers","add","extensionData","registerSetting","versions","JSON","parse","this","setting","e","Array","isArray","translator","trans","Tooltip","component","text","icon","map","version","index","type","onchange","event","target","stringify","basePath","min","wasmFileSize","parseInt","Switch","state","forEach","otherVersion","Button","className","onclick","splice","colspan","push","label","help","placeholder"],"mappings":"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","file":"admin.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 5);\n","module.exports = flarum.core.compat['admin/app'];","module.exports = flarum.core.compat['common/components/Tooltip'];","module.exports = flarum.core.compat['common/helpers/icon'];","module.exports = flarum.core.compat['common/components/Button'];","module.exports = flarum.core.compat['common/components/Switch'];","import app from 'flarum/admin/app';\nimport AdminPage from 'flarum/admin/components/AdminPage';\nimport Button from 'flarum/common/components/Button';\nimport Switch from 'flarum/common/components/Switch';\nimport Tooltip from 'flarum/common/components/Tooltip';\nimport icon from 'flarum/common/helpers/icon';\n\nconst settingName = 'godot-embed.versions';\nconst translationPrefix = 'clarkwinkelmann-godot-embed.admin.settings.';\n\napp.initializers.add('godot-embed', () => {\n    app.extensionData\n        .for('clarkwinkelmann-godot-embed')\n        .registerSetting(function (this: AdminPage) {\n            let versions: {\n                key?: string\n                basePath?: string\n                wasmFileSize?: number\n                default?: boolean\n            }[] = [];\n\n            try {\n                versions = JSON.parse(this.setting(settingName)());\n            } catch (e) {\n                // do nothing, we'll reset to something usable\n            }\n\n            if (!Array.isArray(versions)) {\n                versions = [];\n            }\n\n            return [\n                m('.Form-group', [\n                    m('label', app.translator.trans(translationPrefix + 'versions')),\n                    m('table', [\n                        m('thead', m('tr', [\n                            m('th', app.translator.trans(translationPrefix + 'versionHeader.key')),\n                            m('th', [\n                                app.translator.trans(translationPrefix + 'versionHeader.basePath'),\n                                ' ',\n                                Tooltip.component({\n                                    text: app.translator.trans(translationPrefix + 'versionHeader.basePathHelp'),\n                                }, icon('fas fa-question-circle')),\n                            ]),\n                            m('th', [\n                                app.translator.trans(translationPrefix + 'versionHeader.wasmFileSize'),\n                                ' ',\n                                Tooltip.component({\n                                    text: app.translator.trans(translationPrefix + 'versionHeader.wasmFileSizeHelp'),\n                                }, icon('fas fa-question-circle')),\n                            ]),\n                            m('th', [\n                                app.translator.trans(translationPrefix + 'versionHeader.default'),\n                                ' ',\n                                Tooltip.component({\n                                    text: app.translator.trans(translationPrefix + 'versionHeader.defaultHelp'),\n                                }, icon('fas fa-question-circle')),\n                            ]),\n                            m('th'),\n                        ])),\n                        m('tbody', [\n                            versions.map((version, index) => m('tr', [\n                                m('td', m('input.FormControl', {\n                                    type: 'text',\n                                    value: version.key || '',\n                                    onchange: (event: Event) => {\n                                        version.key = (event.target as HTMLInputElement).value;\n                                        this.setting(settingName)(JSON.stringify(versions));\n                                    },\n                                })),\n                                m('td', m('input.FormControl', {\n                                    type: 'text',\n                                    value: version.basePath || '',\n                                    onchange: (event: Event) => {\n                                        version.basePath = (event.target as HTMLInputElement).value;\n                                        this.setting(settingName)(JSON.stringify(versions));\n                                    },\n                                })),\n                                m('td', m('input.FormControl', {\n                                    type: 'number',\n                                    min: 0,\n                                    value: version.wasmFileSize || '',\n                                    onchange: (event: Event) => {\n                                        const value = parseInt((event.target as HTMLInputElement).value);\n                                        if (value > 0) {\n                                            version.wasmFileSize = value;\n                                        } else {\n                                            delete version.wasmFileSize;\n                                        }\n                                        this.setting(settingName)(JSON.stringify(versions));\n                                    },\n                                })),\n                                m('td', Switch.component({\n                                    state: !!version.default,\n                                    onchange: (value: boolean) => {\n                                        if (value) {\n                                            version.default = true;\n                                        } else {\n                                            delete version.default;\n                                        }\n\n                                        // Disable previous value so only one is checked at a time\n                                        versions.forEach(otherVersion => {\n                                            if (otherVersion !== version && otherVersion.default) {\n                                                delete otherVersion.default;\n                                            }\n                                        });\n\n                                        this.setting(settingName)(JSON.stringify(versions));\n                                    },\n                                })),\n                                m('td', Button.component({\n                                    className: 'Button Button--icon',\n                                    icon: 'fas fa-times',\n                                    onclick: () => {\n                                        versions.splice(index, 1);\n\n                                        this.setting(settingName)(JSON.stringify(versions));\n                                    },\n                                })),\n                            ])),\n                            m('tr', m('td', {\n                                colspan: 4,\n                            }, Button.component({\n                                className: 'Button Button--block',\n                                onclick: () => {\n                                    versions.push({\n                                        key: '',\n                                    });\n\n                                    this.setting(settingName)(JSON.stringify(versions));\n                                },\n                            }, app.translator.trans(translationPrefix + 'versionAdd')))),\n                        ]),\n                    ]),\n                ]),\n            ];\n        })\n        .registerSetting({\n            type: 'text',\n            setting: 'godot-embed.iframeHost',\n            label: app.translator.trans(translationPrefix + 'iframeHost'),\n            help: app.translator.trans(translationPrefix + 'iframeHostHelp'),\n        })\n        .registerSetting({\n            type: 'color',\n            setting: 'godot-embed.backgroundColor',\n            placeholder: '#000',\n            label: app.translator.trans(translationPrefix + 'backgroundColor'),\n            help: app.translator.trans(translationPrefix + 'backgroundColorHelp'),\n        })\n        .registerSetting({\n            type: 'text',\n            setting: 'godot-embed.coverFallback',\n            placeholder: 'https://example.com/image.jpg',\n            label: app.translator.trans(translationPrefix + 'coverFallback'),\n            help: app.translator.trans(translationPrefix + 'coverFallbackHelp'),\n        })\n        .registerSetting({\n            type: 'switch',\n            setting: 'godot-embed.toolbarHover',\n            label: app.translator.trans(translationPrefix + 'toolbarHover'),\n            help: app.translator.trans(translationPrefix + 'toolbarHoverHelp'),\n        });\n});\n"],"sourceRoot":""}